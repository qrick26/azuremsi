{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Authentication type"
      }
    },
    "adminPasswordorSSHKey": {
      "type": "securestring",
      "metadata": {
        "description": "OS Admin password or SSH Key depending on value of authentication type"
      }
    },
    "dnsLabelPrefix": {
      "type": "string",
      "metadata": {
        "description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
      }, 
      "defaultValue": "[concat('msi',uniquestring(resourceGroup().id,deployment().name))]"
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "The Location For the resources"
      }, 
      "defaultValue": "[resourceGroup().location]"
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "The size of the VM to create"
      }, 
      "defaultValue": "Standard_DS1_V2"
    },
    "azureCLI2DockerImage":{
      "type": "string",
      "metadata": {
        "description": "The Docker image to run the azure CLI from"
      }, 
      "defaultValue": "azuresdk/azure-cli-python:latest"
    },  
    "_artifactsLocation": {
        "type": "string",
        "metadata": {
            "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
        },
        "defaultValue": "https://raw.githubusercontent.com/qrick26/azuremsi/master/linuxmsi"
    },
    "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
            "description": "The sasToken required to access _artifactsLocation."
        },
        "defaultValue": ""
    },
    "publisher": {
      "type": "string",
      "metadata": {
        "description": "The VM Publisher"
      },
      "defaultValue": "Canonical"
    },
    "offer": {
      "type": "string",
      "metadata": {
        "description": "The VM Offer"
      },
      "defaultValue": "UbuntuServer"
    },
    "SKU": {
      "type": "string",
      "metadata": {
        "description": "The VM SKU"
      },
      "defaultValue": "16.04-LTS"
    }
  },
  "variables": {
    "storageAccountName": "[take(concat(uniquestring(resourceGroup().id), parameters('dnsLabelPrefix')),24)]",
    "nicName": "[concat('nic',uniquestring(resourceGroup().id,deployment().name))]",
    "networkSecurityGroupName":"[concat('nsg',uniquestring(resourceGroup().id,deployment().name))]",
    "addressPrefix": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetPrefix": "10.0.0.0/24",
    "publicIPAddressName": "[concat('pip',uniquestring(resourceGroup().id,deployment().name))]",
    "vmName": "[concat('vm',uniquestring(resourceGroup().id,deployment().name))]",
    "virtualNetworkName": "[concat('vnet',uniquestring(resourceGroup().id,deployment().name))]",
    "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "computeAPIVersion":"2017-03-30",
    "storageAPIVersion":"2016-12-01",
    "networkAPIVersion":"2016-09-01",
    "managedIdentityAPIVersion":"2015-08-31-PREVIEW",
    "deploymentAPIVersion":"2016-09-01",
    "linuxConfigurationChosen": "[concat('linuxConfiguration', parameters('authenticationType'))]",
    "linuxConfigurationsshPublicKey": {
      "disablePasswordAuthentication": true,
      "ssh": {
        "publicKeys": [
          {
            "path": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
            "keyData": "[parameters('adminPasswordorSSHKey')]"
          }
        ]
      }
    },
    "linuxConfigurationpassword": {
        "disablePasswordAuthentication": false
    },
    "adminPasswordChosen": "[concat('adminPassword', parameters('authenticationType'))]",
    "adminPasswordsshPublicKey": "",
    "adminPasswordpassword": "[parameters('adminPasswordorSSHKey')]",
    "containerName":"msi",
    "createVMUrl":"[concat(parameters('_artifactsLocation'), '/createVM.json', parameters('_artifactsLocationSasToken'))]",
    "createVaultUrl":"[concat(parameters('_artifactsLocation'), '/createVault.json', parameters('_artifactsLocationSasToken'))]",
    "createRBACUrl":"[concat(substring(parameters('_artifactsLocation'),0,lastIndexof(parameters('_artifactsLocation'),'/')), '/templates/setUpRBAC.json', parameters('_artifactsLocationSasToken'))]",
    "keyVaultName":"[concat('vault-',uniquestring(resourceGroup().id))]",
    "sshKeyName":"[concat('ssh-key-',uniquestring(resourceGroup().id))]",
    "numInstances":2,
    "addSshKeyUrl":"[concat(parameters('_artifactsLocation'), '/addSshKey.json', parameters('_artifactsLocationSasToken'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[variables('storageAPIVersion')]",
      "location": "[parameters('Location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "[variables('networkAPIVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[concat('pip',copyIndex(), uniquestring(resourceGroup().id,deployment().name))]",
      "location": "[parameters('Location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('dnsLabelPrefix'), copyIndex())]"
        }
      },
      "copy": {
        "name": "pipLoop",
        "count": "[variables('numInstances')]"
      }
    },
    {
      "apiVersion": "[variables('networkAPIVersion')]",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('Location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
        "name": "[variables('networkSecurityGroupName')]",
        "type": "Microsoft.Network/networkSecurityGroups",
        "apiVersion": "[variables('networkAPIVersion')]",
        "location": "[parameters('location')]",
        "properties": {
            "securityRules": [
                {
                    "name": "default-allow-ssh",
                    "properties": {
                        "priority": 1000,
                        "sourceAddressPrefix": "*",
                        "protocol": "TCP",
                        "destinationPortRange": "22",
                        "access": "Allow",
                        "direction": "Inbound",
                        "sourcePortRange": "*",
                        "destinationAddressPrefix": "*"
                    }
                }
            ]
        }
    },
    {
      "apiVersion": "[variables('networkAPIVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('nic',copyIndex(), uniquestring(resourceGroup().id,deployment().name))]",
      "location": "[parameters('Location')]",
      "dependsOn": [
        "pipLoop",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',concat('pip',copyIndex(), uniquestring(resourceGroup().id,deployment().name)))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
            "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        }
      },
      "copy": {
        "name": "nicLoop",
        "count": "[variables('numInstances')]"
      }
    },
    {
      "name": "[concat('creatingVM', copyIndex())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
         "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
         "nicLoop"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('createVMUrl')]"
        },
        "parameters": {
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[variables(variables('adminPasswordChosen'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "vmSize": {
              "value": "[parameters('vmSize')]"
          },
          "vmName": {
              "value": "[concat('vm', copyIndex(), uniquestring(resourceGroup().id,deployment().name))]"
          },
          "nicName": {
              "value": "[concat('nic', copyIndex(), uniquestring(resourceGroup().id,deployment().name))]"
          },
          "storageAccountName": {
              "value": "[variables('storageAccountName')]"
          },
          "linuxConfiguration": {
              "value": "[variables(variables('linuxConfigurationChosen'))]"
          },
          "publisher": {
            "value": "[parameters('publisher')]"
          },
          "offer": {
            "value": "[parameters('offer')]"
          },
          "SKU": {
            "value": "[parameters('SKU')]"
          }
        }
      },
      "copy":{
        "name": "vmLoop",
        "count": "[variables('numInstances')]"
      }
    },
    {
      "name": "creatingRBAC",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "vmLoop"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('createRBACUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "principalId": {
            "value": "[reference('Microsoft.Resources/deployments/creatingVM0', variables('deploymentApiVersion')).outputs.principalId.value]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          }
        }
      }
    },
    {
      "name": "[concat('vm0', uniquestring(resourceGroup().id,deployment().name),'/gensshkey')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "[variables('computeAPIVersion')]",
      "location": "[parameters('Location')]",
      "dependsOn": [
        "Microsoft.Resources/deployments/creatingVault"
      ],
      "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
              "fileUris": [
                  "[concat(substring(parameters('_artifactsLocation'),0,lastIndexof(parameters('_artifactsLocation'),'/')), '/scripts/writeblob.sh', parameters('_artifactsLocationSasToken'))]",
                  "[concat(substring(parameters('_artifactsLocation'),0,lastIndexof(parameters('_artifactsLocation'),'/')), '/scripts/install-and-run-cli-2.sh', parameters('_artifactsLocationSasToken'))]"
              ]
          },
          "protectedSettings": {
            "commandToExecute": "[concat('./install-and-run-cli-2.sh -i \"', parameters('azureCLI2DockerImage'),'\" -s \"', subscription().subscriptionId, '\" -a \"', variables('storageAccountName'), '\" -c \"', variables('containerName'), '\" -r \"', resourceGroup().Name, '\" -v \"', variables('keyVaultName'), '\" -k \"', variables('sshKeyName'), '\"')]"
          }
      }
    },
    {
      "name": "addSshKey",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', 'vm0', uniquestring(resourceGroup().id,deployment().name),'/extensions/gensshkey')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('addSshKeyUrl')]"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "secretName": {
            "value": "[variables('sshKeyName')]"
          },
          "sshKey": {
            "reference": {
              "keyVault": {
                "id": "[reference('Microsoft.Resources/deployments/creatingVault', variables('deploymentApiVersion')).outputs.vaultId]"
              },
              "secretName": "[variables('sshKeyName')]"
            }
          },
          "vmName":{
            "value":"[concat('vm1', uniquestring(resourceGroup().id,deployment().name))]"
          },
          "storageAccountName":{
            "value":"[variables('storageAccountName')]"
          }
        }
      }
    },
    {
      "name": "creatingVault",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentApiVersion')]",
      "dependsOn": ["Microsoft.Resources/deployments/creatingRBAC"],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('createVaultUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultName": {
            "value": "[variables('keyVaultName')]"
          },
          "vaultSku":{
            "value":"Premium"
          },
          "tenantId": {
            "value": "[subscription().tenantId]"
          },          
          "accessPolicies": {
            "value": [
              {
                "tenantId": "[subscription().tenantId]",
                "objectId": "[reference('Microsoft.Resources/deployments/creatingVM0', variables('deploymentApiVersion')).outputs.principalId.value]",
                "permissions": {
                    "keys": ["all"],
                    "secrets": ["all"]
                }
              },
              {
                "tenantId": "[subscription().tenantId]",
                "objectId": "[reference('Microsoft.Resources/deployments/creatingVM1', variables('deploymentApiVersion')).outputs.principalId.value]",
                "permissions": {
                    "keys": ["all"],
                    "secrets": ["all"]
                }
              }
            ]
          },
          "secretsObject": {
            "value": {
              "secrets": [						
                {
                  "secretName": "[variables('sshKeyName')]",
                  "secretValue": "not-set"
                }
              ]
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "hostname": {
      "type": "string",
      "value": "[reference(concat('pip0', uniquestring(resourceGroup().id,deployment().name))).dnsSettings.fqdn]"
    },
     "principalId": {
      "type": "string",
      "value": "[reference('Microsoft.Resources/deployments/creatingVM0', variables('deploymentApiVersion')).outputs.principalId.value]"
    }
  }
}
